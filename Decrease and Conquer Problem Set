//Heads up - Utilize the decrease and conquer pattern to solve these problems.

1. Number of Ones
Given a sorted bit array (values of either 0 or 1), determine the number of 1's in the array.

Parameters
Input: arr {Array of Integers}
Output: {Integer}

Constraints
Time: O(logN)
Space: O(1)

Examples
[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1] --> 8
[0, 0, 0] --> 0
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1] --> 7

Answer: Since we know that it is a sorted array, we know that the 1's follow the 0's and if we find the starting position of 1's, subtracting it with the (size of the list - starting position of 1's) will give the number of 1's.

iint countOnes(vector arr){ int low = 0; int high = arr.size() - 1; int startPos = 0; while( low < high){ int mid = low + (high - low)/2; if(mid == high || (arr[mid] == 1 && arr[mid-1] == 0) || (arr[mid] == 1 && mid-1 == -1)){ startPos = mid; break; } else if(arr[mid] == 1) // if this is not the first 1, see the values on the left. high = mid; else low = mid; } return ((arr.size() - 1) - startPos) + 1; }

2. Closest Value
Given a sorted bit array of integers, and a target value, find the number in the array that is closest to the target.

Parameters
Input: arr {Array of Integers}
Input: target {Integer}
Output: {Integer}

Constraints If there are two numbers tied for the closest value, return the lowest value.

Time: O(logN)
Space: O(1)

Examples
[1, 2, 3, 5, 5, 7, 9, 10, 11], 6 --> 5
[1, 2, 3], 8 --> 3
[1, 10, 22, 59, 67, 72, 100], 70 --> 72

Answer: int closestNumber(vector arr, int target) {
// Write your code here
if (arr == null || arr.size() == 0) {
return -1;
}
int index = util(arr, target);
if (index == arr.size()) {
return A.length - 1;
}
if (index == 0) {
return 0;
}
if (target - A[index - 1] < A[index] - target) {
return index - 1;
}
return index;
}
int util(vector A, int target) {
int start = 0;
int end = A.size() - 1;
while(start + 1 < end) {
int mid = start + (end - start) / 2;
if (target < A[mid]) {
end = mid;
} else if (target > A[mid]) {
start = mid;
} else {
end = mid;
}
}
if (target <= A[start]) {
return start;
}
if (target <= A[end]) {
return end;
}
return A.size();
}

3. Square Root
Given an positive integer, find the square root.

Parameters
Input: value {Integer}
Output: {Float}

Constraints
Do not use a native built in method.
Ensure the result is accurate to 6 decimal places (0.000001)

Time: O(logN)
Space: O(1)

Examples
4 --> 2.0
98 --> 9.899495
14856 --> 121.885192

Answer: double squareRoot(int val) { double num = 0; double maxNum = val; double minNum = 0; while(midmid != val) {    double mid = (minNum + maxNum) / 2      if(midmid == val) {     return mid;   }   else if(mid*mid < val) {        minNum = mid;    }    else {      maxNum = mid;    }  }  return mid; }

4. Greater Values
Given an sorted array of integers, and a target value return the number of values greater the target.

Parameters
Input: arr {Array of Integers}
Input: target {Integer} Output: {Integer}

Constraints

Time: O(logN)
Space: O(1)

int greaterValues(vector arr, int target){ int start = 0; int end = arr.size() - 1; int n = arr.size() - 1; while(start < end){ int mid = start + (end - start)/2; if(arr[mid] == target){ while(arr[mid] == arr[mid+1]) mid = mid + 1; break; } else if(arr[mid] < target) start = mid + 1; else end = mid - 1; } return (n - mid); }

Examples
[1, 2, 3, 5, 5, 7, 9, 10, 11], 5 --> 4
[1, 2, 3], 4 --> 0
[1, 10, 22, 59, 67, 72, 100], 13 --> 5

5. Sorted and Rotated Array [Extra Credit]
Given a array that is sorted an rotated, find out if a target value exists in the array.

An sorted array is rotated by taking an unknown amount of values from the beginning and placing it at the end.

[3, 4, 5, 1, 2] is rotated left by 2.
[99, 14, 25, 78, 93] is rotated to the right by 1.

Parameters
Input: arr {Array}
Output: {Boolean}

Constraints
Time: O(logN)
Space: O(N)

Examples
[35, 46, 79, 102, 1, 14, 29, 31], 46 --> true [35, 46, 79, 102, 1, 14, 29, 31], 47 --> false [7, 8, 9, 10, 1, 2, 3, 4, 5, 6], 9 --> true

Solution: boolean searchValue(int[]input, int target) { int left = 0; int right = input.size()-1; return searchValue_helper(input, target, left, right); } bool searchValue_helper(int a[], int target, int left, int right) { int mid = left + right/2; if(a[mid] == target) return true; if(right > left) return false; if(a[left] < a[mid]) { if(target <= a[mid] && target >= a[left] ) return searchValue_helper(a, target, left, mid-1); else return searchValue_helper(a, target, mid+1, right); } else if(a[left] > a[mid]){ if(target >= a[mid] && target <= a[right]) return searchValue_helper(a, target, mid+1, right); else return searchValue_helper(a, target, left, mid-1); } else if(a[left] == a[mid]) { if(a[mid] != a[right]) return searchValue_helper(a, target, mid+1, right); } else{ return searchValue_helper(a, target, left, mid-1); }
} return false;

6. Kth Largest [Extra Credit]
Given a unsorted array and an integer k, find the kth largest element in the array

Read up on quickselect here.

Parameters
Input: arr {Array of Integers} Input: k {Integer}
Output: {Integer}

Constraints k < length of arr

Time: O(N)
Space: O(N)

Examples
[1, 4, 2, 5, 12, 9], 3 --> 5
[4, 7, 1, 6], 1 --> 7
[6, 44, 2, 1, 9, 10, -1, 78, 90], 3 --> 44

int findKthLargest(vector& nums, int k) { return findKthLargest_helper(nums, k, 0, nums.size() - 1); }

private: int findKthLargest_helper(vector& nums, int k, int start, int end) { if (start == end) return nums[start]; int pivot = nums[(start + end) / 2]; int i = start, j = end; // perform the partitioning while (i <= j) { while (nums[i] > pivot) i++; while (nums[j] < pivot) j--; if (i <= j) { swap(nums[i], nums[j]); i++, j--; } } // after partition, the elements left to j are the largest(unordered), and // the elements right to i are the smallest(unordered). However, we still // need to check if i or j has gone beyond the border. int left = j - start + 1, right = end - i + 1; if (left > 0) { // the j index is valid if (left >= k) // there are enough elements left to j, find the kth largest there! return findKthLargest_helper(nums, k, start, j); else // the kth largest must lie on the right of index j, discard the ones left to j! return findKthLargest_helper(nums, k - left, j + 1, end); } else { if ((end - start + 1) - right >= k) return findKthLargest_helper(nums, k, start, i - 1); else return findKthLargest_helper(nums, k - (end - start + 1 - right), i, end); } }

7. Multiplication Using Russian Peasant [Extra Credit]
Given two positive integers, return its product using Russian Peasant method of multiplication

Read up on how to apply the Russian Peasant method here. It is also referred to as the Egyptian multiplication.

Parameters
Input: a {Integer}
Input: b {Integer}
Output: {Integer}

Constraints
Assume a <= b, and the value of a is N.

Time: O(logN)
Space: O(1)

Examples
734, 487 --> 357458
846, 908--> 768168

int russianPeasant(int a,int b) { int res = 0; // initialize result // While second number doesn't become 1 while (b >= 1){ if (b & 1) // If second number becomes odd, add the first number to result res = res + a; a = a << 1;//double the first number by bit shifting to the left. b = b >> 1;//half the second number by bit shifting to the right. } return res; }
