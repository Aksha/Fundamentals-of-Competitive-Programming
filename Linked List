Problem set 1: 
Linked List
 *
 *  Solve the following problems involving linked lists.
 */

import java.io.*;
import java.util.*;

// ListNode class for a linked list node
class ListNode {
  public int value;
  public ListNode next;

  public ListNode(int value){
    this.value = value;
  }
}


class Problems {

  // DO NOT EDIT
  // Generate a linked list from an array
  public static ListNode generateList(int[] arr) {
    if(arr.length == 0){
      return null;
    }
    ListNode head = new ListNode(arr[0]);
    ListNode current = head;
    for(int i = 1; i < arr.length; i++){
      current.next = new ListNode(arr[i]);
      current = current.next;
    }
    return head;
  }


/**
 * 1a. Create a method which prints the value of each node until the tail
 *
 * Input: node {ListNode}
 * Output: void
 *
 * Example: (1) --> (5) --> (7) --> (10)
 *          Head                    Tail
 *          1
 *          5
 *          7
 *          10
 */

  // Time Complexity: O(N)
  // Auxiliary Space Complexity: O(1)
  public static void printForward(ListNode node) {
    ListNode current = node;
    while (current != null) {
      System.out.println(current.value);
      current = current.next;
    }
  }


/**
 * 1b. Given a node, print the value of each node backwards from the tail to the
 * input node using recursion.
 *
 * Input: node {ListNode}
 * Output: void
 *
 * Example: (1) --> (5) --> (7) --> (10)
 *          Head                    Tail
 *          10
 *          7
 *          5
 *          1
 */

  // Time Complexity: O(N)
  // Auxiliary Space Complexity: O(N)
  public static void printBackward(ListNode node) {
    if (node == null) {
      return;
    }
    printBackward(node.next);
    System.out.println(node.value);
  }


/**
 * 1c. Create a public method on the singly LinkedList class that reverses the
 *     order of the nodes in the linked list
 *
 * Input: node {ListNode}
 * Output: {ListNode}
 *
 * Example: (1) --> (5) --> (7) --> (10) .reverse()
 *          Head                    Tail
 *
 *          (10) --> (7) --> (5) --> (1)
 *          Head                    Tail
 *
 * What is the time and auxiliary space complexity of your solution?
 */

  // Time Complexity: O(N)
  // Auxiliary Space Complexity: O(1)
  public static ListNode reverse(ListNode node) {
    if (node == null) {
      return node;
    }
    ListNode prev = null;
    ListNode current = node;
    ListNode next;
    while(current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
    }

    return prev;
  }


/**
 * 1d. Create a method which swaps the first occurance of the locations of two
 *     nodes in the linked list.
 *
 * Input: head {ListNode},
 * Input: a {Integer}
 * Input: b {Integer}
 * Output: {ListNode}
 *
 * Example:
 * ListNode head = Problems.generateList({1, 5, 7, 10});
 * head = swap(head, 5, 10);
 *
 *          (1) --> (5) --> (7) --> (10)
 *          Head
 *
 *          (1) --> (10) --> (7) --> (5)
 *          Head
 */

  // Time Complexity: O(N)
  // Auxiliary Space Complexity: O(1)
  public static ListNode swap(ListNode head, int a, int b) {
    if (head == null || a == b) {
      return head;
    }

    ListNode[] location1 = Problems.locate(head, a);
    ListNode[] location2 = Problems.locate(head, b);
    ListNode prev1 = location1[0];
    ListNode current1 = location1[1];
    ListNode prev2 = location2[0];
    ListNode current2 = location2[1];

    if (current1 == null || current2 == null) { return head; }
    if (prev1 != null) {
      prev1.next = current2;
    }
    if (prev2 != null) {
      prev2.next = current1;
    }
    ListNode temp = current1.next;
    current1.next = current2.next;
    current2.next = temp;

    if (prev1 == null) {
      return current2;
    }
    if (prev2 == null) {
      return current1;
    }
    return head;
  }

  private static ListNode[] locate(ListNode node, int target) {
    ListNode prev = null;
    ListNode current = node;
    ListNode[] results = new ListNode[2];
    while (current != null) {
      if(current.value == target){
          results[0] = prev;
          results[1] = current;
          return results;
      }
      prev = current;
      current = current.next;
    }
    return results;
  }

 /*
  *
  *  Given an input of a ListNode, return true if the ListNode is in a circular
  *  linked list, and false if the linked list that terminates.
 */
  public static boolean isCircular(ListNode node){
    ListNode tortoise = node;
    ListNode hare = node;

    while (hare != null && hare.next != null) {
      hare = hare.next.next;
      tortoise = tortoise.next;
      if (tortoise == hare) {
        return true;
      }
    }
    return false;
  }

}

Problem set 2: 

 * ListNode class
 *
 *  Prompt:    Create a ListNode class
 *
 *             The ListNode class should contain the following public properties:
 *
 *                 value:   {Integer}
 *                  next:   {ListNode} (initially null)
 *
 *               Example:   ListNode sample = new ListNode(1)
 *                          sample.value     // 1
 *                          sample.next      // null
 *
 *
 *  Problem 2: LinkedList class
 *
 *  Prompt:    Create a LinkedList class
 *
 *             The LinkedList class should contain the following public
 *             properties:
 *
 *                length:   {Integer}
 *                  head:   {ListNode}
 *                  tail:   {ListNode}
 *
 *              The LinkedList class should also contain the following public
 *              methods:
 *
 *                append:   A method that appends a value to the end of the
 *                          LinkedList.
 *
 *                          Input:     {Integer}
 *                          Output:    {Void}
 *
 *                insert:   A method that inserts an integer value at a set
 *                          index in the LinkedList (assume head index is 0).
 *
 *                          Input:     value {Integer}
 *                          Input:     index {Integer}
 *                          Output:    {Void}
 *
 *                delete:   A method that removes a node at a specified index.
 *
 *                          Input:     index {Integer}
 *                          Output:    {Void}
 *
 *              contains:   A method that checks to see if a value is contained
 *                          in the list.
 *
 *                          Input:     value {Integer}
 *                          Output:    {Boolean}
 */
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------
Solution: 
//LinkedList Implementation in C++

struct node
  {
    int data;
    node *next;
  };	

//Creation of a linked list:
 class listNode
  {
    Private:
    node *head, *tail;
    public:
    list()
    {
      head=NULL;
      tail=NULL;
    }
   
 };

 class LinkedList {
  public: 
   //creating a node in a linked list. Insertion at the end is O(1) time worst case
      void append(int value) {
        node *temp=new node;
        temp->data=value;
        temp->next=NULL;
        if(head==NULL) {
          head=temp;
          tail=temp;
          temp=NULL;
        }
        else {	
          tail->next=temp;
          tail=temp;
        }
      }
      
      //insertion at a specific position is O(n) time worst case
      void insert(int pos, int value) {
        node *pre=new node;
        node *cur=new node;
        node *temp=new node;
        cur=head;
        for(int i=1;i<pos;i++)
        {
          pre=cur;
          cur=cur->next;
        }
        temp->data=value;
        pre->next=temp;	
        temp->next=cur;
      }
    
   //deletion at a particular position is O(n) time worst case
    void delete(int pos) {
      node *current=new node;
      node *previous=new node;
      current=head;
      for(int i=1;i<pos;i++) {
        previous=current;
        current=current->next;
      }
      previous->next=current->next;
    }
   
   //to find if the given value is in the linked list, it takes O(n) time worst case
    bool contains(int val){
      node* current = new node;
      current = head;
      while(current != NULL){
        if(current->data == val)
           return true;
        current = current->next;
      }
      return false
    }
  };
  
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
